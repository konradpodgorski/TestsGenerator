{% autoescape false %}
<?php

namespace {{ testClassNamespace }};

use {{ fileClassNamespace }}\{{ fileClass }};
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class {{ testClassName }} extends WebTestCase
{

    /**
     * @var {{ fileClass }}
     */
    protected $object;

    /**
    * @var client;
    */
    protected $client;
    {% if insertEm is defined %}

    /**
     * @var \Doctrine\ORM\EntityManager
     */
    protected $em;
    {% endif %}

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    {% if classConstructorHasParm is defined %}
    {% if constructorParameters|length > 0 %}
/**
        * Parameters:
    {% for paramter in constructorParameters %}
    * {{ paramter }}
    {% endfor %}
    */
    {% endif %}
    $this->object = $this->getMock('{{ fileClass }}');
    {% else %}
    $this->object = new {{ fileClass }};
    {% endif %}
    $this->client = static::createClient();
    {% if insertEm is defined %}
    $this->em = $this->client->getContainer()
            ->get('doctrine')
            ->getManager();

        // drop and create schema
        $this->regenerateDoctrineSchema();

        // load fixtures here


    {% endif %}
}

    /**
    * Tears down the fixture, for example, closes a network connection.
    * This method is called after a test is executed.
    */
    protected function tearDown()
    {
        parent::tearDown();
    {% if insertEm is defined %}
    $this->em->close();
    {% endif %}
}

{% if insertEm is defined %}
    /**
     * @return null
     */
    protected function regenerateDoctrineSchema()
    {
        $metadatas = $this->em->getMetadataFactory()->getAllMetadata();

        if (!empty($metadatas)) {
            $tool = new \Doctrine\ORM\Tools\SchemaTool($this->em);
            $tool->dropSchema($metadatas);
            $tool->createSchema($metadatas);
        }
    }
{% endif %}
    {% for method in methods %}
        {{ method }}
    {% endfor %}

}
{% endautoescape %}